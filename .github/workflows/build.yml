name: "Build"

on:
  push:
    tags: [ '*' ]

jobs:
  release:
    runs-on: ubuntu-latest
    name: "Create release"
    outputs:
      release_upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
          name: v${{ github.ref_name }}
          draft: true

  build:
    runs-on: ubuntu-latest
    name: "Build (Manifest ${{ matrix.manifest_version }})"
    needs: [ release ]

    strategy:
      matrix:
        manifest_version: [ 2, 3 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup jq
        run: sudo apt-get install -y jq

      - name: Prepare env files (production)
        if: ${{ contains(github.ref_name, 'dev') == false }}
        run: cp .env.production .env.local

      - name: Prepare env files (development)
        if: ${{ contains(github.ref_name, 'dev') == true }}
        run: cp .env.development .env.local

      - name: Install dependencies
        run: bun install

      - name: Update version
        run: ./tag-version.sh ${{ github.ref_name }}

      - name: Build extension
        run: bun run build
        env:
          MANIFEST_VERSION: ${{ matrix.manifest_version }}

      - name: Create archive
        run: cd dist && zip -r ${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip .

      - name: Upload Assets to Release
        uses: csexton/release-asset-action@v2
        with:
          pattern: "dist/*.zip"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ needs.release.outputs.release_upload_url }}

  release-publish:
    name: "Publish release"
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Publish Release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
          name: v${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'dev') == true }}
          allowUpdates: true
