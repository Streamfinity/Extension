name: "Build"

on:
  push:
    tags: [ '*' ]

env:
  CHROME_EXTENSION_ID: mkaledojmamkljdldoeefpabbgfdkack

jobs:
  release:
    runs-on: ubuntu-latest
    name: "Create release"
    outputs:
      release_upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
          name: v${{ github.ref_name }}
          draft: true

  build:
    runs-on: ubuntu-latest
    name: "Build (MV${{ matrix.manifest_version }})"
    needs: [ release ]

    strategy:
      matrix:
        manifest_version: [ 2, 3 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup jq
        run: sudo apt-get install -y jq

      - name: Prepare env files (production)
        if: ${{ contains(github.ref_name, 'dev') == false }}
        run: cp .env.production .env.local

      - name: Prepare env files (development)
        if: ${{ contains(github.ref_name, 'dev') == true }}
        run: cp .env.development .env.local

      - name: Install dependencies
        run: bun install
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update version
        run: ./tag-version.sh ${{ github.ref_name }}

      - name: Build extension
        run: bun run build
        env:
          MANIFEST_VERSION: ${{ matrix.manifest_version }}

      - name: Create archive
        run: cd dist && zip -r ${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip .

      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip"
          path: "dist/*.zip"

  pack-chrome:
    name: "Pack (Chrome MV${{ matrix.manifest_version }})"
    runs-on: ubuntu-latest
    needs: [ release, build ]

    strategy:
      matrix:
        manifest_version: [ 2, 3 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip"
          path: artifacts/

      - run: ls -la artifacts

      - uses: cardinalby/webext-buildtools-chrome-crx-action@v2
        with:
          zipFilePath: "artifacts/${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip"
          crxFilePath: "dist/Chrome_${{ github.ref_name }}_mv${{ matrix.manifest_version }}.crx"
          privateKey: ${{ secrets.CHROME_CRX_PRIVATE_KEY }}

      - uses: actions/upload-artifact@v3
        with:
          name: "${{ github.ref_name }}_mv${{ matrix.manifest_version }}.crx"
          path: "dist/*.crx"

  pack-firefox:
    name: "Pack (Firefox MV${{ matrix.manifest_version }})"
    runs-on: ubuntu-latest
    needs: [ release, build ]

    strategy:
      matrix:
        manifest_version: [ 2, 3 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip"
          path: artifacts/

      - run: ls -la artifacts

      - run: |
          mkdir -p dist/
          mv artifacts/${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip dist/Firefox_${{ github.ref_name }}_mv${{ matrix.manifest_version }}.xpi

      - uses: actions/upload-artifact@v3
        with:
          name: "Firefox_${{ github.ref_name }}_mv${{ matrix.manifest_version }}.xpi"
          path: "dist/*.xpi"

  publish-firefox:
    name: "Publish Firefox"
    runs-on: ubuntu-latest
    needs: [ pack-firefox ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: "Firefox_${{ github.ref_name }}_mv2.xpi"
          path: artifacts/

      - run: |
          tree artifacts/
          mkdir -p dist/

      - name: Sign extension
        uses: kewisch/action-web-ext@v1
        with:
          cmd: sign
          source: "artifacts/Firefox_${{ github.ref_name }}_mv2.xpi"
          artifacts: dist
          channel: unlisted
          apiKey: ${{ secrets.FIREFOX_API_KEY }}
          apiSecret: ${{ secrets.FIREFOX_API_SECRET }}
          timeout: 900000

      - run: |
          mv ${{ steps.web-ext-sign.outputs.target }} dist/Firefox_${{ github.ref_name }}_mv2_signed.xpi

      - uses: actions/upload-artifact@v3
        with:
          name: "Firefox_${{ github.ref_name }}_mv2_signed.xpi"
          path: "dist/*.xpi"

  publish-chrome:
    name: "Publish Chrome"
    runs-on: ubuntu-latest
    needs: [ pack-chrome ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v2-beta
        with:
          node-version: "16.10"

      - uses: actions/download-artifact@v3
        with:
          name: "${{ github.ref_name }}_mv3.zip"
          path: artifacts/

      - run: mkdir -p dist/

      - name: Upload to Chrome Web Store
        uses: mobilefirstllc/cws-publish@latest
        with:
          action: "testers"  # one of: upload, publish, testers
          client_id: ${{ secrets.CHROME_CLIENT_ID }}
          client_secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh_token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          extension_id: ${{ env.CHROME_EXTENSION_ID }}
          zip_file: "artifacts/${{ github.ref_name }}_mv3.zip"

      - uses: actions/upload-artifact@v3
        with:
          name: "Firefox_${{ github.ref_name }}_mv2_signed.xpi"
          path: "dist/*.xpi"

  release-publish:
    name: "Publish release"
    runs-on: ubuntu-latest
    needs: [ release, pack-chrome, pack-firefox, publish-firefox ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - run: tree artifacts/

      - run: mkdir dist
      - run: find artifacts/ -type f -print0 | xargs -0 mv -t dist/

      - run: ls -lisah dist/

      - name: Upload Assets to Release
        uses: csexton/release-asset-action@v2
        with:
          pattern: "dist/*"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ needs.release.outputs.release_upload_url }}

      - name: Publish Release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
          name: v${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'dev') == true }}
          allowUpdates: true
