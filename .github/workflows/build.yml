name: "Build"

on:
  push:
    tags: [ '*' ]

jobs:
  release:
    runs-on: ubuntu-latest
    name: "Create release"
    outputs:
      release_upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
          name: v${{ github.ref_name }}
          draft: true

  build:
    runs-on: ubuntu-latest
    name: "Build (Manifest ${{ matrix.manifest_version }})"
    needs: [ release ]

    strategy:
      matrix:
        manifest_version: [ 2, 3 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup node env
        uses: actions/setup-node@v2
        with:
          node-version: 16
          check-latest: true

      - name: Prepare env files
        if: ${{ contains(github.ref_name, 'dev') == false }}
        run: cp .env .env.local

      - name: Prepare env files
        if: ${{ contains(github.ref_name, 'dev') == true }}
        run: cp .env.development .env.local

      - name: Authenticate npm
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Update version
        run: yarn version --new-version ${{ github.ref_name }} --no-git-tag-version

      - name: Build extension
        run: yarn build
        env:
          MANIFEST_VERSION: ${{ matrix.manifest_version }}

      - name: Create archive
        run: cd dist && zip -r ${{ github.ref_name }}_mv${{ matrix.manifest_version }}.zip .

      - name: Upload Assets to Release
        uses: csexton/release-asset-action@v2
        with:
          pattern: "dist/*.zip"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ needs.release.outputs.release_upload_url }}

  release-publish:
    name: "Publish release"
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Publish Release
        id: release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ github.ref }}
          name: v${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'dev') == true }}
          allowUpdates: true
